import re
import pandas as pd
import sys

def getTupleElementByName(allListOfValues,parametername,groupname):
    valuesList=[]

    for item in allListOfValues: 
        for tpl in item[groupname]: 
            if groupname=="test_procedure":
                if tpl[1]==parametername:
                    valuesList.append((tpl[0],tpl[1],tpl[3]))

            else:
                if tpl[0]==parametername: 
                    valuesList.append(tpl[1])  
    return valuesList

def getListOfParameters(originalText,itemRegex):
    """
    Args:
        originalText (_type_): _description_
        itemRegex (_type_): _description_

    Returns:
        _type_: _description_
    Description:
        1. The first line gets the original text and splits using newline character to get each line of text and remove the empty lines and returns a list.
        2. Then, given the regular expression to get parameter,value items, it finds these values and returns a list of list of tuples.
        3. Then, remove the empty lists in the previous step without any values.
        4. Finally, flatten the list of lists into a list.
    """
    listOfParameters=[item.strip() for item in originalText.split('\n') if item]  
    #print(listOfParameters) 
    listOfParameters=[re.findall(itemRegex, item) for item in listOfParameters] 
    #print(listOfParameters) 
    listOfParameters=[item for item in listOfParameters if item] . 
    #print(listOfParameters)
    listOfParameters = [x for xs in listOfParameters for x in xs]  
    #print(listOfParameters) 
    return listOfParameters
    

fileName=sys.argv[1] 
#fileName="testcase.xlsx"
df_excel=pd.read_excel(fileName,header=None)
df_excel.columns=["TestCase"] 

allListOfValues=[]
"""Notes
# ([^"]+): Matches 1 or more characters except " into a group
# (.*?): Matches 0 or more any character except newline for 0 or 1 time into a group.
# re.DOTALL: Without the switch, . matches any character except a newline. When re.DOTALL is used, newlines are matched as well:
"""
# Regex to capture different sections
testCaseType_regex=r"Test Summary:(.*?)Test Case.*"

preconditions_regex = r"Preconditions:(.*?)Test Procedure:" 

preconditions_item_regex=r'Set the EEPROM Parameter par"([^"]+)" to "([^"]+)"' 

test_procedure_regex = r"Test Procedure:(.*?)Expected Results:"
test_procedure_item_regex=r'Channel:"([^"]+)":"([^"]+)":sig"([^"]+)" to.* "([^"]+)"'

expected_results_regex = r"Expected Results:(.*)"
expected_results_item_regex= r'Status of Software Variable "([^"]+)" should be "([^"]+)"'   

for index,text in df_excel.iterrows():
    testcaseText=text.values[0]
    # Extracting text for each section

    testCaseType_text=re.search(testCaseType_regex, testcaseText, re.DOTALL).group(1).strip()   
    preconditions_text = re.search(preconditions_regex, testcaseText, re.DOTALL).group(1).strip()
    test_procedure_text = re.search(test_procedure_regex, testcaseText, re.DOTALL).group(1).strip()
    expected_results_text = re.search(expected_results_regex, testcaseText, re.DOTALL).group(1).strip()

    preconditionsList=getListOfParameters(preconditions_text,preconditions_item_regex)
    test_procedureList=getListOfParameters(test_procedure_text,test_procedure_item_regex)
    expected_resultsList=getListOfParameters(expected_results_text,expected_results_item_regex)

    testCaseItemDict={
        "testType":testCaseType_text,
        "preconditions":preconditionsList,
        "test_procedure":test_procedureList,
        "expected_results":expected_resultsList
    }
    #print(testCaseItemDict)
    
    allListOfValues.append(testCaseItemDict)
print(allListOfValues)


#print(allListOfValues[0]['preconditions']) ilk dictionary'nın precondition'ları geldi. 

#print(allListOfValues[]['preconditions'])
print([item['preconditions'] for item in allListOfValues])


result = getTupleElementByName(allListOfValues,'PRMnumAxles','preconditions')

print(result)

result = getTupleElementByName(allListOfValues,'SCA_C2','test_procedure')

print(result)









